'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var fetch = require('cross-fetch');

var SDKError = function (_Error) {
  _inherits(SDKError, _Error);

  function SDKError(message, obj) {
    _classCallCheck(this, SDKError);

    var _this = _possibleConstructorReturn(this, (SDKError.__proto__ || Object.getPrototypeOf(SDKError)).call(this, message));

    _this.name = 'SDKError';
    _this.error = obj.error;
    _this.error_description = obj.error_description;
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(_this, _this.constructor);
    } else {
      _this.stack = new Error(message).stack;
    }
    return _this;
  }

  return SDKError;
}(Error);

function SteemConnect() {
  this.options = {
    baseURL: 'https://v2.steemconnect.com',
    app: '',
    callbackURL: '',
    scope: []
  };
}

SteemConnect.prototype.setBaseURL = function setBaseURL(baseURL) {
  this.options.baseURL = baseURL;
};
SteemConnect.prototype.setApp = function setApp(app) {
  this.options.app = app;
};
SteemConnect.prototype.setCallbackURL = function setCallbackURL(callbackURL) {
  this.options.callbackURL = callbackURL;
};
SteemConnect.prototype.setAccessToken = function setAccessToken(accessToken) {
  this.options.accessToken = accessToken;
};
SteemConnect.prototype.removeAccessToken = function removeAccessToken() {
  this.options.accessToken = undefined;
};
SteemConnect.prototype.setScope = function setScope(scope) {
  this.options.scope = scope;
};

SteemConnect.prototype.getLoginURL = function getLoginURL(state) {
  var loginURL = this.options.baseURL + '/oauth2/authorize?client_id=' + this.options.app + '&redirect_uri=' + encodeURIComponent(this.options.callbackURL);
  loginURL += this.options.scope ? '&scope=' + this.options.scope.join(',') : '';
  loginURL += state ? '&state=' + encodeURIComponent(state) : '';
  return loginURL;
};

SteemConnect.prototype.send = function send(route, method, body, cb) {
  var url = this.options.baseURL + '/api/' + route;
  var promise = fetch(url, {
    method: method,
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      Authorization: this.options.accessToken
    },
    body: JSON.stringify(body)
  }).then(function (res) {
    var json = res.json();
    // If the status is something other than 200 we need
    // to reject the result since the request is not considered as a fail
    if (res.status !== 200) {
      return json.then(function (result) {
        return Promise.reject(new SDKError('sc2-sdk error', result));
      });
    }
    return json;
  }).then(function (res) {
    if (res.error) {
      return Promise.reject(new SDKError('sc2-sdk error', res));
    }
    return res;
  });

  if (!cb) return promise;

  return promise.then(function (res) {
    return cb(null, res);
  }).catch(function (err) {
    return cb(err, null);
  });
};

SteemConnect.prototype.broadcast = function broadcast(operations, cb) {
  return this.send('broadcast', 'POST', { operations: operations }, cb);
};

SteemConnect.prototype.me = function me(cb) {
  return this.send('me', 'POST', {}, cb);
};

SteemConnect.prototype.vote = function vote(voter, author, permlink, weight, cb) {
  var params = {
    voter: voter,
    author: author,
    permlink: permlink,
    weight: weight
  };
  return this.broadcast([['vote', params]], cb);
};

SteemConnect.prototype.comment = function comment(parentAuthor, parentPermlink, author, permlink, title, body, jsonMetadata, cb) {
  var params = {
    parent_author: parentAuthor,
    parent_permlink: parentPermlink,
    author: author,
    permlink: permlink,
    title: title,
    body: body,
    json_metadata: JSON.stringify(jsonMetadata)
  };
  return this.broadcast([['comment', params]], cb);
};

SteemConnect.prototype.reblog = function reblog(account, author, permlink, cb) {
  var params = {
    required_auths: [],
    required_posting_auths: [account],
    id: 'follow',
    json: JSON.stringify(['reblog', {
      account: account,
      author: author,
      permlink: permlink
    }])
  };
  return this.broadcast([['custom_json', params]], cb);
};

SteemConnect.prototype.follow = function follow(follower, following, cb) {
  var params = {
    required_auths: [],
    required_posting_auths: [follower],
    id: 'follow',
    json: JSON.stringify(['follow', { follower: follower, following: following, what: ['blog'] }])
  };
  return this.broadcast([['custom_json', params]], cb);
};

SteemConnect.prototype.unfollow = function unfollow(unfollower, unfollowing, cb) {
  var params = {
    required_auths: [],
    required_posting_auths: [unfollower],
    id: 'follow',
    json: JSON.stringify(['follow', { follower: unfollower, following: unfollowing, what: [] }])
  };
  return this.broadcast([['custom_json', params]], cb);
};

SteemConnect.prototype.ignore = function ignore(follower, following, cb) {
  var params = {
    required_auths: [],
    required_posting_auths: [follower],
    id: 'follow',
    json: JSON.stringify(['follow', { follower: follower, following: following, what: ['ignore'] }])
  };
  return this.broadcast([['custom_json', params]], cb);
};

SteemConnect.prototype.claimRewardBalance = function claimRewardBalance(account, rewardSteem, rewardSbd, rewardVests, cb) {
  var params = {
    account: account,
    reward_steem: rewardSteem,
    reward_sbd: rewardSbd,
    reward_vests: rewardVests
  };
  return this.broadcast([['claim_reward_balance', params]], cb);
};

SteemConnect.prototype.revokeToken = function revokeToken(cb) {
  var _this2 = this;

  return this.send('oauth2/token/revoke', 'POST', { token: this.options.accessToken }, cb).then(function () {
    return _this2.removeAccessToken();
  });
};

SteemConnect.prototype.updateUserMetadata = function updateUserMetadata() {
  var metadata = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var cb = arguments[1];

  return this.send('me', 'PUT', { user_metadata: metadata }, cb);
};

SteemConnect.prototype.sign = function sign(name, params, redirectUri) {
  if (typeof name !== 'string' || (typeof params === 'undefined' ? 'undefined' : _typeof(params)) !== 'object') {
    return new SDKError('sc2-sdk error', {
      error: 'invalid_request',
      error_description: 'Request has an invalid format'
    });
  }
  var url = this.options.baseURL + '/sign/' + name + '?';
  url += Object.keys(params).map(function (key) {
    return key + '=' + encodeURIComponent(params[key]);
  }).join('&');
  url += redirectUri ? '&redirect_uri=' + encodeURIComponent(redirectUri) : '';
  return url;
};

exports.Initialize = function Initialize(config) {
  var instance = new SteemConnect();

  if (!config) {
    throw new Error('You have to provide config');
  }

  if ((typeof config === 'undefined' ? 'undefined' : _typeof(config)) !== 'object') {
    throw new Error('Config must be an object');
  }

  if (config.baseURL) instance.setBaseURL(config.baseURL);
  if (config.app) instance.setApp(config.app);
  if (config.callbackURL) instance.setCallbackURL(config.callbackURL);
  if (config.accessToken) instance.setAccessToken(config.accessToken);
  if (config.scope) instance.setScope(config.scope);

  return instance;
};