doctype html
html(lang='en')
  head
    title Hello!
    meta(charset='utf-8')
    meta(http-equiv='X-UA-Compatible', content='IE=edge')
    meta(name='viewport', content='width=device-width, initial-scale=1')
    // import the webpage's stylesheet
    link(rel='stylesheet', href='/style.css')
    // import the webpage's javascript file
    script(src='https://aframe.io/releases/0.8.2/aframe.min.js')
    script(src='https://unpkg.com/aframe-text-geometry-component@0.5.0/dist/aframe-text-geometry-component.min.js')
    script(src='https://rawgit.com/feiss/aframe-environment-component/master/dist/aframe-environment-component.min.js')
    script(src='https://unpkg.com/aframe-fps-look-controls-component/dist/aframe-fps-look-controls-component.min.js')
    script(src='https://rawgit.com/Ctrl-Alt-Zen/aframe-mobile-controls/master/components/twoway-motion/twoway-motion.js')
    script(src='https://rawgit.com/fernandojsg/aframe-teleport-controls/master/dist/aframe-teleport-controls.min.js')
    script(src='https://unpkg.com/aframe-state-component@3.4.0/dist/aframe-state-component.min.js')
    script(src='https://cdn.steemjs.com/lib/latest/steem.min.js')
    script(src='https://rawgit.com/ngokevin/kframe/master/components/layout/dist/aframe-layout-component.js')
    script(src='js/dlux.js')
    script.
      AFRAME.registerComponent('vote', {
      schema: {default: ''},
      init: function () {
      var permlink = this.data.split( '/' )[1]
      var author = this.data.split( '/' )[2]
      var weight = this.data.split( '/' )[3]
      var voteMessage = {'parmlink': permlink, 'author': author, 'weight': weight}
      this.el.addEventListener('click', function () {
      aVote(voteMessage);
      });
      }
      });
      function aVote(message) {
      $.post({
      url: '/post/vote/',
      dataType: 'json',
      data: {
      'permlink': message.permlink,
      'author': message.author,
      'weight': message.weight
      }}, (response) => {
      });
      }
      // get User Profile information
      function getAccountInfo(username) {
      steem.api.getDynamicGlobalProperties((err, result) => {
      let totalVestingShares = result.total_vesting_shares;
      let totalVestingFundSteem = result.total_vesting_fund_steem;
      steem.api.getAccounts([username], (err, result) => {
      steem.api.getDynamicGlobalProperties((err, result) => {
      let totalVestingShares = result.total_vesting_shares;
      let totalVestingFundSteem = result.total_vesting_fund_steem;
      })
      let user = result[0]
      let jsonData;
      try {jsonData = JSON.parse(user.json_metadata).profile} catch(err) { console.log(err)}
      console.log(user)
      // steem power calc
      let vestingShares = user.vesting_shares;
      let delegatedVestingShares = user.delegated_vesting_shares;
      let receivedVestingShares = user.received_vesting_shares;
      let steemPower = steem.formatter.vestToSteem(vestingShares, totalVestingShares, totalVestingFundSteem);
      let delegatedSteemPower = steem.formatter.vestToSteem((receivedVestingShares.split(' ')[0])+' VESTS', totalVestingShares, totalVestingFundSteem);
      let outgoingSteemPower = steem.formatter.vestToSteem((receivedVestingShares.split(' ')[0]-delegatedVestingShares.split(' ')[0])+' VESTS', totalVestingShares, totalVestingFundSteem) - delegatedSteemPower;
      // vote power calc
      let lastVoteTime = (new Date - new Date(user.last_vote_time + "Z")) / 1000;
      let votePower = user.voting_power += (10000 * lastVoteTime / 432000);
      votePower = Math.min(votePower / 100, 100).toFixed(2);
      let data = {
      name: user.name,
      image: jsonData.profile_image ? 'https://steemitimages.com/512x512/' + jsonData.profile_image : '',
      cover: jsonData.cover_image,
      rep: steem.formatter.reputation(user.reputation),
      effectiveSp: parseInt(steemPower  + delegatedSteemPower - -outgoingSteemPower),
      sp: parseInt(steemPower).toLocaleString(),
      delegatedSpIn: parseInt(delegatedSteemPower).toLocaleString(),
      delegatedSpOut: parseInt(-outgoingSteemPower).toLocaleString(),
      vp: votePower,
      steem: user.balance.substring(0, user.balance.length - 5),
      sbd: user.sbd_balance.substring(0, user.sbd_balance.length - 3),
      numOfPosts: user.post_count,
      followerCount: '',
      followingCount: '',
      usdValue: '',
      createdDate: new Date (user.created)
      }
      data.usdValue = steem.formatter.estimateAccountValue(user)
      AFRAME.scenes[0].emit('setUsername', {val: data.name});
      AFRAME.scenes[0].emit('setUserImage', {val: data.image});
      AFRAME.scenes[0].emit('setUserCover', {val: data.cover});
      AFRAME.scenes[0].emit('setUserRep', {val: data.rep});
      AFRAME.scenes[0].emit('seteffectiveSp', {val: data.effectiveSp});
      AFRAME.scenes[0].emit('setsp', {val: data.sp});
      AFRAME.scenes[0].emit('setdelegatedSpIn', {val: data.delegatedSpIn});
      AFRAME.scenes[0].emit('setdelegatedSpOut', {val: data.delegatedSpOut});
      AFRAME.scenes[0].emit('setvp', {val: data.vp});
      AFRAME.scenes[0].emit('setsteem', {val: data.steem});
      AFRAME.scenes[0].emit('setsbd', {val: data.sbd});
      AFRAME.scenes[0].emit('setnumOfPosts', {val: data.numOfPosts});
      AFRAME.scenes[0].emit('setfollowerCount', {val: data.followerCount});
      AFRAME.scenes[0].emit('setfollowingCount', {val: data.followingCount});
      AFRAME.scenes[0].emit('setusdValue', {val: data.usdValue});
      AFRAME.scenes[0].emit('setcreatedDate', {val: data.createdDate});
      steem.api.getFollowCount(user.name, function(err, result){
      })
      });
      })
      }
      // get User Image
      function generateProfileImage(author){
      let profileImage = 'img/default-user.jpg';
      try {
      if (author.json_metadata === '' || typeof author.json_metadata === 'undefined' ) {
      author.json_metadata = { profile_image : false }
      } else {
      author.json_metadata = JSON.parse(author.json_metadata).profile
      }
      profileImage = author.json_metadata.profile_image ? 'https://steemitimages.com/128x128/' + author.json_metadata.profile_image : '';
      } catch(err){
      console.log(err)
      }
      return profileImage
      }
      function setPortals(action) {
      //if (!action.initial) {action.result.shift()}
      for (let i = 0; i < action.length ; i++) {
      let post = action[i];
      var valP
      var valA
      var val
      valP = Math.round( parseFloat(post.pending_payout_value.substring(0,5)) * 100) / 100
      valA = Math.round( parseFloat(post.total_payout_value.substring(0,5)) * 100) / 100
      if (valP) {
      val = valP
      } else {
      val = valA
      }
      let portal = {
      postId: post.id,
      postUrl: post.url,
      author: post.author,
      title: post.title,
      body: post.body,
      Hash360: JSON.parse(post.json_metadata).Hash360,
      permlink: post.permlink ,
      rep: steem.formatter.reputation(post.author_reputation),
      votesNum: post.net_votes,
      votesVal: '$' + val,
      category: post.category
      }
      AFRAME.scenes[0].emit('addToPortals', {portalObj: portal});
      }
      AFRAME.scenes[0].emit('setPortalsIndex', {val: i});
      }
      AFRAME.registerState({
      initialState: {
      loggedIn: false,
      username: "Acquiring sync",
      name: "Welcome",
      userImage:"https://cdn.glitch.com/5ba0e9a1-e1be-470c-be6c-b6bd1b8e349e%2FOTOLUX%20Tag.png?1528445998829",
      userCover:"",
      userRep: "25",
      portals: [
      ],
      portalIndex: 0,
      portalCat: "",
      portalSub: "dlux-io",
      votePower: "%",
      voteValue: "$",
      voteCurrentWeight: "100%",
      sp: "3",
      delegatedSpIn: "4",
      delegatedSpOut: "5",
      effectiveSp: "6",
      vp: "7",
      steem: "8",
      sbd: "9",
      numOfPosts: "10",
      followerCount: "55",
      followingCount: "77",
      usdValue: "45",
      createdDate: "ago",
      menuVis: false
      },
      handlers: {
      setLoggedIn: function (state, action) {
      state.loggedIn = action.val;
      },
      popUser: function (state, action) {
      getAccountInfo(action.val)
      },
      setcreatedDate: function (state, action) {
      state.createdDate = action.val;
      },
      setusdValue: function (state, action) {
      state.usdValue = action.val;
      },
      setfollowingCount: function (state, action) {
      state.followingCount = action.val;
      },
      setfollowerCount: function (state, action) {
      state.followerCount = action.val;
      },
      setnumOfPosts: function (state, action) {
      state.numOfPosts = action.val;
      },
      setsbd: function (state, action) {
      state.sbd = action.val;
      },
      setsteem: function (state, action) {
      state.steem = action.val;
      },
      setvp: function (state, action) {
      state.vp = action.val;
      },
      seteffectiveSp: function (state, action) {
      state.effectiveSp = action.val;
      },
      setdelegatedSpIn: function (state, action) {
      state.delegatedSpIn = action.val;
      },
      setdelegatedSpOut: function (state, action) {
      state.delegatedSpOut = action.val;
      },
      setsp: function (state, action) {
      state.sp = action.val;
      },
      setUsername: function (state, action) {
      state.username = action.val;
      },
      setUserImage: function (state, action) {
      state.userImage = action.val;
      console.log(state)
      },
      setUserCover: function (state, action) {
      state.userCover= action.val;
      },
      setUserRep: function (state, action) {
      state.userRep = action.val;
      },
      funwithportals: function (state, action) {
      state.portals = action.val;
      },
      setPortalsIndex: function (state, action) {
      state.portalIndex = action.val;
      },
      setPortalCat: function (state, action) {
      state.portalCat = action.val;
      },
      setVotePower: function (state, action) {
      state.votePower = action.val;
      },
      setUserValue: function (state, action) {
      state.voteValue = action.val;
      },
      setVoteCurrentWeight: function (state, action) {
      state.voteCurrentWeight = action.val;
      },
      setMenuVis: function (state, action) {
      state.menuVis = !state.menuVis;
      },
      addToPortals: function (state, action) {
      state.portals.push(action.portalObj);
      },
      /*
      setTrendingTags: function {
      steem.api.getTrendingTags('', 20, (err, result) => {
      if (err) return console.log(err);
      result = result.filter(post => post.parent_permlink === 'dlux')
      displayTrendingTags(result)
      });*/
      setDiscussionsByBlog: function (state, action) {
      let query = { tag: action.blogOf, limit: 20 }
      steem.api.getDiscussionsByBlog(query, (err, result) => {
      var filteredResults = []
      for (i = 0; i < result.length; i++) {
      let vr = JSON.parse(result[i].json_metadata).vrHash
      if (vr) {
      filteredResults.push(result[i])
      }
      }
      setPortals(filteredResults)
      })
      }
      }
      });
      function popData () {
      AFRAME.scenes[0].emit('setDiscussionsByBlog', {blogOf: `#{username}`});
      AFRAME.scenes[0].emit('popUser', {val: `#{username}`});
      }
  body(onload='popData()')
    a-scene(antialias='true')
      a-entity(environment='preset: forest')
      a-entity#cameraRig
        a-camera(set-camera='', wasd-controls='', look-controls='')
          a-cursor
      a-entity(position='-5 1 -5', bind-for='for: portalItem; in: portals', layout='angle: NaN; columns: 4; margin: 4; type: box')
        template
          a-entity.poster-image(show-info='', geometry='primitive:sphere', url='{{ portalItem.postUrl}}', material='side:double;src:https://ipfs.io/ipfs/{{ portalItem.Hash360 }}', position='0 0 0', rotation='0 -45 0', scale='1 1 1')
            a-entity.hidebutton(id='{{portalItem.postId}}', visible='false')
              a-entity.col-1(position='3 3 0')
                a-entity.r1-title(geometry='primitive:plane;width:6;height:1', material='side:double;color:#16398D;opacity:0.7', position='0 0.5 0')
                  a-entity.title-text(text-geometry='value:iterate;font:https://rawgit.com/mrdoob/three.js/dev/examples/fonts/optimer_bold.typeface.json;size:0.4', position='-2.610104380706663 -0.22664574459161102 0.1', rotation='', scale='1 1 0.01', material='')
                a-entity.r2-author(geometry='primitive:plane;width:6;height:1', material='side:double;color:#25D193;opacity:0.7', position='0 -0.5 0', rotation='0 0 0', url='/@{{ portalItem.author}}')
                  a-entity.author-pic(geometry='primitive:circle;radius:0.45', material='side:double;src:#author need more functions to pull this info', position='-2.34 0 0.1', scale='1 1 1')
                  a-entity.username(text-geometry='value:disregardfiat;font:https://rawgit.com/mrdoob/three.js/dev/examples/fonts/optimer_bold.typeface.json;size:0.34', position='-1.367 -0.155 0.1', rotation='', scale='1 1 0.01', material='')
                  a-entity.rep(text-geometry='value:54;font:https://rawgit.com/mrdoob/three.js/dev/examples/fonts/optimer_bold.typeface.json;size:0.3', position='2.194796349166291 -0.12506570270188472 0.1', rotation='', scale='1 1 0.01', material='')
                a-entity.r3-body(geometry='primitive:plane;width:6;height:2', material='side:double;opacity:0.7', position='0 -2 0')
                  a-entity.body-text(wrap-count='100', text-geometry='value:{{ portalItem.body }};font:https://rawgit.com/mrdoob/three.js/dev/examples/fonts/optimer_bold.typeface.json;size:0.3', position='-2.7 .46 0.1', rotation='', scale='1 1 .01', material='color:black')
                a-entity.r4-voting(geometry='primitive:plane;width:6;height:1', material='side:double;color:#999999;opacity:0.7', position='0 -3.5 0')
                  a-entity.vote(vote='{{ portalItem.postUrl }}/10000', geometry='primitive:plane;width:0.8;height:0.8', material='side:double;src:https://cdn.glitch.com/5ba0e9a1-e1be-470c-be6c-b6bd1b8e349e%2Fupvote.png?1528448497979;transparent:true;alphaTest:0.82', position='0 0 0.1')
                  a-entity.value(text-geometry='value:{{ portalItem.votesVal }};font:https://rawgit.com/mrdoob/three.js/dev/examples/fonts/optimer_bold.typeface.json;size:0.3', position='1.385 -0.09268436887713527 0.1', rotation='', scale='1 1 0.01', material='')
      a-entity#user-profile(geometry='primitive:plane;width:10;height:5.5', material='side:double;color:#4C4C4C;opacity:0.7', position='1.25 4.1 -15', scale='.7 .7 .7', rotation='')
        a-entity#user-pic(geometry='primitive:circle', bind='material.src: userImage', material='side:double', position='0 2.5 0.1', scale='2 2 2', do-on-asset-load='#user')
        a-entity#user-rank(geometry='primitive:circle', material='side:double;color:#3F8BF8;opacity:1', position='-3.5 1.33 0.1', scale='')
          a-entity#rank-icon(geometry='primitive:circle', material='side:double;src:#rank;transparent:true;alphaTest:0.3', position='0 0 0.1')
        a-entity#user-rep(geometry='primitive:circle', material='side:double;color:#FFF;opacity:1', position='3.5 1.33 0.1', scale='')
          a-entity#rep-text(bind='text-geometry.value: userRep', text-geometry='font:https://rawgit.com/mrdoob/three.js/dev/examples/fonts/optimer_bold.typeface.json', position='-.723 -.5 0.1', rotation='', scale='2 2 0.01', material='color:black')
        a-entity#name(bind='text-geometry.value: name', text-geometry='font:https://rawgit.com/mrdoob/three.js/dev/examples/fonts/optimer_bold.typeface.json', position='-2.82 -.67 0.1', rotation='', scale='2 2 0.01', material='')
        a-entity#username(bind='text-geometry.value: username', text-geometry='font:https://rawgit.com/mrdoob/three.js/dev/examples/fonts/optimer_bold.typeface.json', position='-4.379 -2 0.1', rotation='', scale='2 2 0.01', material='')
      a-entity#ambient-light(light='type:ambient;intensity:0.5')
      a-entity#spot-light(light='angle:35;intensity:0.2;type:spot')
