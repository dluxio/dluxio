doctype html
html
  head
    meta(property='og:title', content=OGtitle)
    meta(property='og:description', content=OGdescription)
    meta(property='og:image', content=OGimage)
    title= title
    link(rel='stylesheet', href='/css/style.css')
    link(rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous")
    script(src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=" crossorigin="anonymous")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/showdown/1.8.6/showdown.min.js")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.1/moment.min.js")
    script(src="https://cdn.steemjs.com/lib/latest/steem.min.js")
    script(src="/js/main.js")
    style.
      html, body{
      margin: 0;
      height: 100%;
      }
      iframe{
      border: 0;
      display:inline-block;
      }
    script.
      var stateObj
      const steemKey = '#{username}/#{permlink}'
      const author = '#{username}';
      const permlink = '#{permlink}'
      steem.api.getState(`/#{category}/@#{username}/#{permlink}`, (err, result) => {
      stateObj = result
      var metadata = result.content[steemKey].json_metadata
      var hashy = JSON.parse(metadata).vrHash
      var scrolling = JSON.parse(metadata).scrolling
      if (!hashy) {
      hashy = JSON.parse(metadata).arHash
      }
      if (!hashy) {
      hashy = JSON.parse(metadata).appHash
      }
      if (!hashy) {
      hashy = JSON.parse(metadata).audHash
      }
      if (hashy.split('/')[3] == 'ipfs') {
      hashy = hashy.split('/')[4];
      }
      var vars = location.href.split('?')[1]
      var iframe = document.createElement('iframe');
      iframe.id = 'theIframe'
      iframe.scrolling = scrolling || 'no'
      iframe.width = '100%'
      iframe.height = '100%'
      iframe.setAttribute('allowvr', true)
      iframe.setAttribute('allowfullscreen', true)
      iframe.setAttribute('allow', 'gyroscope; accelerometer; microphone; camera; xr')
      iframe.src = `https://${hashy}.ipfs.dlux.io/ipfs/${hashy}?${vars}`;
      document.body.appendChild(iframe);
      });
      if (isIOS()) {
      window.addEventListener('devicemotion', function(e) {
      document.getElementById('theIframe').contentWindow.postMessage({
      type: 'devicemotion',
      deviceMotionEvent: cloneDeviceMotionEvent(e),
      }, '*');
      });
      }
      function isIOS() {
      return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
      }
      function cloneDeviceMotionEvent(e) {
      return {
      acceleration: {
      x: e.acceleration.x,
      y: e.acceleration.y,
      z: e.acceleration.z,
      },
      accelerationIncludingGravity: {
      x: e.accelerationIncludingGravity.x,
      y: e.accelerationIncludingGravity.y,
      z: e.accelerationIncludingGravity.z,
      },
      rotationRate: {
      alpha: e.rotationRate.alpha,
      beta: e.rotationRate.beta,
      gamma: e.rotationRate.gamma,
      },
      interval: e.interval,
      timeStamp: e.timeStamp
      };
      }
      if (window.addEventListener) {
      window.addEventListener("message", onMessage, false);
      }
      else if (window.attachEvent) {
      window.attachEvent("onmessage", onMessage, false);
      }
      function onMessage(event) {
      if (event.origin !== "https://ipfs.dlux.io") return;
      var data = event.data;
      if (typeof(window[data.func]) == "function") {
      if (data.func == 'advPost' || data.func == 'vote' || data.func == 'signDecode' || data.func == 'signEncode' || data.func == 'follow' || data.func == 'aVote' || data.func == 'sendLink' || data.func == 'iloaded' || data.func == 'passGenerateHotLink' || data.func == 'comment' ){
      window[data.func].call(null, data.message);
      }
      }
      }
      function vote(message) {
      $.post({
      url: '/post/vote/',
      dataType: 'json',
      data: {
      'permlink': '#{permlink}',
      'author': '#{username}',
      'weight': message
      }
      }, (response) => {
      steem.api.getState(`/#{category}/@#{username}/#{permlink}`, (err, result) => {
      var target = document.getElementById('theIframe').contentWindow
      target.postMessage({
      'func': 'steemState',
      'message': result,
      }, "*");
      })
      })
      }
      function comment(message) {
      confirm(`Confirm posting the ${message.message} with ${message.customJSON} as a steem comment.`)
      $.post({
      url: '/post/comment/',
      dataType: 'json',
      data: {
      'parentPermlink': '#{permlink}',
      'parentAuthor': '#{username}',
      'message': message.message,
      'parentTitle': stateObj.content[steemKey].title,
      'customJSON': message.customJSON
      }
      }, (response) => {
      steem.api.getState(`/#{category}/@#{username}/#{permlink}`, (err, result) => {
      var target = document.getElementById('theIframe').contentWindow
      target.postMessage({
      'func': 'steemState',
      'message': result,
      }, "*");
      })
      })
      }
      function follow(message) {
      console.log('got ' + message)
      $.post({
      url: '/post/follow/',
      dataType: 'json',
      data: {
      'following': message
      }
      }, (response) => {
      steem.api.getAccounts([`#{iAm}`], (err, result) => {
      var target = document.getElementById('theIframe').contentWindow
      target.postMessage({
      'func': 'accountUpdate',
      'message': result,
      }, "*");
      })
      })
      }
      function aVote(message) {
      $.post({
      url: '/post/vote/',
      dataType: 'json',
      data: {
      'permlink': message.permlink,
      'author': message.author,
      'weight': message.weight
      }}, (response) => {
      console.log(response)
      var target = document.getElementById('theIframe').contentWindow
      target.postMessage({
      'func': 'voteMsg',
      'message': stateObject
      }, "*");
      });
      }
      function sendLink(link) {
      if (link == '/auth') {
      setCookie('dropOff', `/#{category}/@#{username}/#{permlink}`, 15);
      location.href = '/auth';
      } else if (link.includes("steemconnect.com")) {
      location.href = link;
      } else if (link.split('/')[0].includes(":")) {
      if (confirm('The was a request to navigate away from dlux.io | Would you like to navigate to | ' + link)){
      location.href = link;
      }
      } else if (link == 'back()'){
      window.history.back();
      } else {
      location.href = link;
      }
      }
      var memoRights = 0
      function signEncode(message) {
      if(!memoRights){
      memoRights = confirm('Allow this app to encrypt and decrypt messages')
      }
      if (memoRights  == true) {
      steem.api.getAccounts([message.to], (err, result) => {
      if (err) {
      console.log(err)
      }
      if (result.length === 0) {
      console.log('No Such User')
      }
      var encoded = steem.memo.encode(localStorage.memoKey, result[0].memo_key, `#` + message.memo);
      target.postMessage({
      'func': 'encoded',
      'message': {
      'memo': encoded,
      'msgid': message.msgid, }
      }, "*");
      });
      } else {}
      }
      function signDecode(message) {
      if(!memoRights){
      memoRights = confirm('Allow this app to encrypt and decrypt messages')
      }
      if (memoRights  == true) {
      var decoded = steem.memo.decode(localStorage.memoKey, message.encoded);
      target.postMessage({
      'func': 'decoded',
      'message': {
      'memo': decoded,
      'msgid': message.msgid, }
      }, "*");
      } else {}
      }
      userLoggedIn = '#{iAm}'
      function iloaded(){
      steem.api.getState(`/#{category}/@#{username}/#{permlink}`, (err, result) => {
      var target = document.getElementById('theIframe').contentWindow
      target.postMessage({
      'func': 'iAm',
      'message': '#{iAm}',
      }, "*");
      target.postMessage({
      'func': 'key',
      'message': '#{username}/#{permlink}',
      }, "*");
      target.postMessage({
      'func': 'steemState',
      'message': result,
      }, "*");
      target.postMessage({
      'func': 'memoKey',
      'message': hasMemoKey(),
      }, "*");
      })
      }
    body
